homeassistant:
  customize:
    package.node_anchors:
      customize: &customize
        package: 'OneState Packages - Porta Ingresso'
        author: 'OneState'
      setting:
######################################################################
#                                                                    #
#                         IMPOSTAZIONI PACKAGE                       #
#                                                                    #
######################################################################

        # SMART LOCK
        Smart Lock: &lock lock.porta

        # SENSORI PORTA
        Sensore porta: &porta "{{ states('binary_sensor.porta')}}"

        Sensore porta entitÃ : &porta2 binary_sensor.porta

        # SERVIZI NOTIFICHE
        Servizio notifica push: &push notify.push_roberto

        Servizio notifica telegram: &telegram notify.telegram_lotablet





input_datetime:
  last_door_open:
    name: "Ultima apertura porta"
    has_date: true
    has_time: true
  orario_inizio_notifiche_porta:
    name: "Orario Inizio Notifiche"
    has_date: false
    has_time: true
  orario_fine_notifiche_porta:
    name: "Orario Fine Notifiche"
    has_date: false
    has_time: true

####################################################

input_boolean:
  notify_push_porta:
    name: "Notifica Push"
  notify_telegram_porta:
    name: "Notifica Telegram"
  package_porta_switch:
    name: "Package Porta Switch"
template:
  - binary_sensor:
      - name: "Porta Stato Blocco"
        state: "{{ is_state('input_boolean.package_porta_switch', 'off') }}"
        device_class: lock
      - name: "Sensore Porta Package"
        unique_id: sensore_porta_package
        state: *porta
        device_class: door

automation:
  - alias: Package Porta - Sync Stato Porta al Riavvio
    description: "Sincronizza input_boolean con lo stato reale della serratura al boot"
    trigger:
      - platform: homeassistant
        event: start
    condition: []
    action:
      - delay: "00:00:30"
      - choose:
          - conditions:
              - condition: state
                entity_id: *lock
                state: "locked"
            sequence:
              - service: input_boolean.turn_on
                target:
                  entity_id: input_boolean.package_porta_switch
          - conditions:
              - condition: state
                entity_id: *lock
                state: "unlocked"
            sequence:
              - service: input_boolean.turn_off
                target:
                  entity_id: input_boolean.package_porta_switch
    mode: single
  - alias: Package Porta - Switch
    mode: single
    trigger:
      - platform: state
        entity_id: input_boolean.package_porta_switch
        to: "on"
        id: porta_on
      - platform: state
        entity_id: input_boolean.package_porta_switch
        to: "off"
        id: porta_off
      - platform: state
        entity_id: *lock
        to: "locked"
        id: bloccato
      - platform: state
        entity_id: *lock
        to: "unlocked"
        id: sbloccato
    condition: []
    action:
      - choose:
          - conditions:
              - condition: trigger
                id: porta_off
              - condition: state
                entity_id: *lock
                state: "locked"
            sequence:
              - service: lock.unlock
                target:
                  entity_id: *lock

          - conditions:
              - condition: trigger
                id: porta_on
              - condition: state
                entity_id: *lock
                state: "unlocked"
            sequence:
              - service: lock.lock
                target:
                  entity_id: *lock

          - conditions:
              - condition: trigger
                id: bloccato
              - condition: state
                entity_id: input_boolean.package_porta_switch
                state: "off"
            sequence:
              - service: input_boolean.turn_on
                target:
                  entity_id: input_boolean.package_porta_switch

          - conditions:
              - condition: trigger
                id: sbloccato
              - condition: state
                entity_id: input_boolean.package_porta_switch
                state: "on"
            sequence:
              - service: input_boolean.turn_off
                target:
                  entity_id: input_boolean.package_porta_switch
  - mode: single
    id: package_porta_notifiche
    alias: "Package Porta - Notifiche"
    trigger:
      - platform: state
        entity_id: *porta2
        to: "on"
        id: porta
    action:
      - choose:
          - conditions:
              - condition: trigger
                id: porta
              - condition: state
                entity_id: input_boolean.notify_push_porta
                state: "on"
              - condition: time
                after: input_datetime.orario_inizio_notifiche_porta
                before: input_datetime.orario_fine_notifiche_porta
            sequence:
              - service: *push
                data:
                  message: "ðŸšª Porta Aperta ðŸšª"
      - choose:
          - conditions:
              - condition: trigger
                id: porta
              - condition: state
                entity_id: input_boolean.notify_telegram_porta
                state: "on"
              - condition: time
                after: input_datetime.orario_inizio_notifiche_porta
                before: input_datetime.orario_fine_notifiche_porta
            sequence:
              - service: *telegram
                data:
                  message: "ðŸšªPorta ApertaðŸšª"

  - alias: "Package Porta - Registra ultima apertura porta"
    id: regista_ultima_apertura_porta
    description: "Aggiorna la data e l'ora dell'ultima apertura della porta"
    trigger:
      - platform: state
        entity_id: *porta2
        to: 'on'
    action:
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.last_door_open
        data:
          datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
    mode: single
